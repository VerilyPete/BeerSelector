require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

# Detect if we're in a CI environment
is_ci = ENV['CI'] == 'true' || ENV['RUNNING_IN_CI'] == 'true'
puts "CI environment detected: #{is_ci}" if is_ci

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

# Set additional environment variables for CI builds
if is_ci
  puts "Setting CI-specific build configurations..."
  ENV['RCT_NO_LAUNCH_PACKAGER'] = '1'  # Don't start the Metro packager during CI build
end

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'BeerSelector' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  # Remove the custom React-hermes pod to avoid dependency conflicts
  # pod 'React-hermes', :path => '../node_modules/react-native/sdks/hermes' do |hermes|
  #   hermes.build_settings['MACH_O_TYPE'] = 'staticlib'
  #   hermes.build_settings['EXECUTABLE_EXTENSION'] = 'a'
  #   hermes.build_settings['PRODUCT_NAME'] = 'libReact-hermes'
  #   hermes.build_settings['INSTALL_PATH'] = '$(LOCAL_LIBRARY_DIR)/Frameworks'
  # end

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Apply CI-specific configurations
    if is_ci
      puts "Applying CI-specific optimizations to build settings..."
      
      # Disable code signing for CI builds to prevent issues
      installer.pods_project.targets.each do |target|
        target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
          config.build_settings['CODE_SIGN_IDENTITY'] = '-'
          
          # Optimize for build speed in CI (we can tune these settings if needed)
          # Disable parallel builds in CI to avoid race conditions
          config.build_settings['PARALLEL_PROCESS_FILES_USING_CLANG'] = 'NO'
          
          # Ensure deterministic builds
          config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = '-'
        end
      end
    end

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
    
    # Apply build fixes to individual targets
    installer.pods_project.targets.each do |target|  
      # Fix for Pods-BeerSelector target (multiple output files error)
      if target.name == 'Pods-BeerSelector'
        puts "⚠️ Applying fixes to Pods-BeerSelector target..."
        target.build_configurations.each do |config|
          # Disable parallel processing to avoid -o flag issues
          config.build_settings['PARALLEL_PROCESS_FILES_USING_CLANG'] = 'NO'
          # Add custom libtool flags to avoid warnings
          config.build_settings['OTHER_LIBTOOLFLAGS'] = '-no_warning_for_no_symbols'
          # Force specific linking behavior
          config.build_settings['OTHER_LDFLAGS'] = '$(inherited) -ObjC'
          
          # Ensure proper linking with React-hermes
          lib_search_paths = config.build_settings['LIBRARY_SEARCH_PATHS'] || ['$(inherited)']
          lib_search_paths = [lib_search_paths] unless lib_search_paths.is_a?(Array)
          unless lib_search_paths.find { |path| path.include?('React-hermes') }
            lib_search_paths << '"$(PODS_CONFIGURATION_BUILD_DIR)/React-hermes"'
          end
          config.build_settings['LIBRARY_SEARCH_PATHS'] = lib_search_paths
        end
      end
      
      # Fix for RCT-Folly missing Coroutine.h header file
      if target.name == 'RCT-Folly'
        target.build_configurations.each do |config|
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FOLLY_HAVE_COROUTINE=0'
        end
      end
      
      # Set deployment target and bitcode settings for all targets
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        
        # For Xcode Cloud CI/CD builds
        if config.name == 'Release'
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
        end
      end
    end
    
    # Fix DEFINES_MODULE conflicts in a separate loop to avoid conflicts
    # Only set for targets that exist in the project
    ['expo-dev-menu', 'Main', 'ReactNativeCompatibles', 'SafeAreaView', 'Vendored'].each do |target_name|
      target = installer.pods_project.targets.find { |t| t.name == target_name }
      if target
        puts "Setting DEFINES_MODULE=YES for target: #{target_name}"
        target.build_configurations.each do |config|
          config.build_settings['DEFINES_MODULE'] = 'YES'
        end
      end
    end
end
end
