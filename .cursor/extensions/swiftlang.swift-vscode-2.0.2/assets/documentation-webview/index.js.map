{
  "version": 3,
  "sources": ["../../src/documentation/webview/CommunicationBridge.ts", "../../src/documentation/webview/ErrorMessage.ts", "../../src/documentation/webview/webview.ts"],
  "sourcesContent": ["//===----------------------------------------------------------------------===//\n//\n// This source file is part of the VS Code Swift open source project\n//\n// Copyright (c) 2024 the VS Code Swift project authors\n// Licensed under Apache License v2.0\n//\n// See LICENSE.txt for license information\n// See CONTRIBUTORS.txt for the list of VS Code Swift project authors\n//\n// SPDX-License-Identifier: Apache-2.0\n//\n//===----------------------------------------------------------------------===//\n\nimport { Disposable } from \"./Disposable\";\n\n/**\n * Sends and receives messages from swift-docc-render\n */\nexport interface CommunicationBridge {\n    send(message: VueAppMessage): void;\n    onDidReceiveMessage(handler: (message: VueAppMessage) => void): Disposable;\n}\n\n/**\n * Creates a {@link CommunicationBridge} that can send and receive messages from\n * swift-docc-render. Waits for swift-docc-render to be initialized before resolving.\n *\n * This must be kept up to date with src/plugins/CommunicationBridge.js in swift-docc-render.\n *\n * @returns A promise that resolves to the created CommunicationBridge\n */\nexport function createCommunicationBridge(): Promise<CommunicationBridge> {\n    if (\"webkit\" in window) {\n        throw new Error(\"A CommunicationBridge has already been established\");\n    }\n\n    return new Promise<CommunicationBridge>((resolve, reject) => {\n        try {\n            // Define the window.webkit property in order to receive messages\n            const messageHandlers: Set<(message: VueAppMessage) => void> = new Set();\n            Object.defineProperty(window, \"webkit\", {\n                value: {\n                    messageHandlers: {\n                        bridge: {\n                            postMessage(message: VueAppMessage) {\n                                messageHandlers.forEach(handler => handler(message));\n                            },\n                        },\n                    },\n                },\n                writable: false,\n            });\n\n            // Wait for the window.bridge property to be set in order to send messages\n            let windowBridge: unknown;\n            Object.defineProperty(window, \"bridge\", {\n                get() {\n                    return windowBridge;\n                },\n                set(value) {\n                    windowBridge = value;\n                    resolve({\n                        send(message) {\n                            value.receive(message);\n                        },\n                        onDidReceiveMessage(handler): Disposable {\n                            messageHandlers.add(handler);\n                            return {\n                                dispose() {\n                                    messageHandlers.delete(handler);\n                                },\n                            };\n                        },\n                    });\n                },\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\n/**\n * Represents a message that can be sent between the webview and swift-docc-render\n */\nexport type VueAppMessage = RenderedMessage | NavigationMessage | UpdateContentMessage;\n\n/**\n * Sent from swift-docc-render to the webview when content as been rendered\n * to the screen.\n */\nexport interface RenderedMessage {\n    type: \"rendered\";\n}\n\n/**\n * Sent from the webview to swift-docc-render to navigate to a given page.\n *\n * This will only work once due to limitations in VS Code WebViews. You will\n * need to send an {@link UpdateContentMessage} after the first render to\n * switch pages.\n */\nexport interface NavigationMessage {\n    type: \"navigation\";\n    data: string;\n}\n\n/**\n * Sent from the webview to swift-docc-render to update the page content.\n *\n * The data comes from the JSON files found in the \"data\" subdirectory\n * of the documentation archive. This must first be parsed into a\n * JavaScript object before sending. Raw strings will not be parsed\n * automatically.\n */\nexport interface UpdateContentMessage {\n    type: \"contentUpdate\";\n    data: unknown;\n}\n", "//===----------------------------------------------------------------------===//\n//\n// This source file is part of the VS Code Swift open source project\n//\n// Copyright (c) 2025 the VS Code Swift project authors\n// Licensed under Apache License v2.0\n//\n// See LICENSE.txt for license information\n// See CONTRIBUTORS.txt for the list of VS Code Swift project authors\n//\n// SPDX-License-Identifier: Apache-2.0\n//\n//===----------------------------------------------------------------------===//\n\nexport class ErrorMessage {\n    private readonly containerElement: HTMLDivElement;\n    private readonly iconElement: HTMLSpanElement;\n    private readonly messageElement: HTMLSpanElement;\n\n    constructor() {\n        this.containerElement = createContainer();\n        this.iconElement = createIcon();\n        this.messageElement = createMessage();\n        this.containerElement.appendChild(this.iconElement);\n        this.containerElement.appendChild(this.messageElement);\n        window.document.body.appendChild(this.containerElement);\n    }\n\n    show(message: string) {\n        this.messageElement.textContent = message;\n        this.containerElement.style.display = \"flex\";\n    }\n\n    hide() {\n        this.containerElement.style.display = \"none\";\n    }\n}\n\nfunction createContainer(): HTMLDivElement {\n    const containerElement = document.createElement(\"div\");\n    containerElement.style.backgroundColor = \"var(--vscode-editor-background)\";\n    containerElement.style.color = \"var(--vscode-foreground)\";\n    containerElement.style.fontFamily = \"var(--vscode-font-family)\";\n    containerElement.style.fontWeight = \"var(--vscode-font-weight)\";\n    containerElement.style.width = \"100%\";\n    containerElement.style.height = \"100%\";\n    containerElement.style.display = \"none\";\n    containerElement.style.gap = \"10px\";\n    containerElement.style.flexDirection = \"column\";\n    containerElement.style.alignItems = \"center\";\n    containerElement.style.justifyContent = \"center\";\n    containerElement.style.position = \"absolute\";\n    containerElement.style.top = \"0\";\n    containerElement.style.left = \"0\";\n    return containerElement;\n}\n\nfunction createIcon(): HTMLSpanElement {\n    const iconElement = document.createElement(\"span\");\n    iconElement.className = \"codicon codicon-error\";\n    iconElement.style.color = \"var(--vscode-editorError-foreground)\";\n    iconElement.style.fontSize = \"48px\";\n    return iconElement;\n}\n\nfunction createMessage(): HTMLSpanElement {\n    const messageElement = document.createElement(\"span\");\n    messageElement.style.fontSize = \"14px\";\n    return messageElement;\n}\n", "//===----------------------------------------------------------------------===//\n//\n// This source file is part of the VS Code Swift open source project\n//\n// Copyright (c) 2024-2025 the VS Code Swift project authors\n// Licensed under Apache License v2.0\n//\n// See LICENSE.txt for license information\n// See CONTRIBUTORS.txt for the list of VS Code Swift project authors\n//\n// SPDX-License-Identifier: Apache-2.0\n//\n//===----------------------------------------------------------------------===//\n\nimport { RenderNode, WebviewContent, WebviewMessage } from \"./WebviewMessage\";\nimport { createCommunicationBridge } from \"./CommunicationBridge\";\nimport { ErrorMessage } from \"./ErrorMessage\";\n\ncreateCommunicationBridge().then(async bridge => {\n    const vscode = acquireVsCodeApi();\n    let activeDocumentationPath: string | undefined;\n    let contentToApplyOnRender: RenderNode | undefined;\n\n    // An HTML element that displays an error message to the user\n    const errorMessage = new ErrorMessage();\n\n    // Handle messages coming from swift-docc-render\n    bridge.onDidReceiveMessage(message => {\n        switch (message.type) {\n            case \"rendered\":\n                if (contentToApplyOnRender) {\n                    setTimeout(() => {\n                        bridge.send({ type: \"contentUpdate\", data: contentToApplyOnRender });\n                        contentToApplyOnRender = undefined;\n                    }, 1);\n                    break;\n                }\n                vscode.postMessage({ type: \"rendered\" });\n                break;\n        }\n    });\n\n    // Handle messages coming from vscode-swift\n    window.addEventListener(\"message\", event => {\n        if (typeof event.data !== \"object\" || !(\"type\" in event.data)) {\n            return;\n        }\n\n        const message = event.data as WebviewMessage;\n        switch (message.type) {\n            case \"update-content\":\n                handleUpdateContentMessage(message.content);\n                break;\n        }\n    });\n    function handleUpdateContentMessage(content: WebviewContent) {\n        if (content.type === \"render-node\") {\n            hideErrorMessage();\n            const renderNode = content.renderNode;\n            const documentationPath: string = (() => {\n                switch (renderNode.kind) {\n                    case \"symbol\":\n                    case \"article\":\n                        return \"/live/documentation\";\n                    case \"overview\":\n                        return \"/live/tutorials-overview\";\n                    default:\n                        return \"/live/tutorials\";\n                }\n            })();\n            if (activeDocumentationPath !== documentationPath) {\n                activeDocumentationPath = documentationPath;\n                contentToApplyOnRender = renderNode;\n                bridge.send({\n                    type: \"navigation\",\n                    data: documentationPath,\n                });\n            } else {\n                bridge.send({ type: \"contentUpdate\", data: renderNode });\n            }\n        } else {\n            showErrorMessage(content.errorMessage);\n            vscode.postMessage({ type: \"rendered\" });\n        }\n    }\n\n    function showErrorMessage(message: string) {\n        const app = window.document.getElementById(\"app\");\n        if (app) {\n            app.style.display = \"none\";\n        }\n        errorMessage.show(message);\n    }\n\n    function hideErrorMessage() {\n        const app = window.document.getElementById(\"app\");\n        if (app) {\n            app.style.display = \"block\";\n        }\n        errorMessage.hide();\n    }\n\n    // Notify vscode-swift that we're ready to receive messages\n    vscode.postMessage({ type: \"loaded\" });\n});\n\ndeclare global {\n    /**\n     * An API provided by VS Code used to retrieve/store state and communicate with\n     * the extension that created this WebView.\n     */\n    interface VSCodeWebviewAPI {\n        /**\n         * Get the current state of this WebView.\n         *\n         * Used in combination with {@link setState} to retain state even if this WebView is hidden.\n         *\n         * @returns the current value of the state\n         */\n        getState(): unknown | undefined;\n\n        /**\n         * Set the current state of this Webview.\n         *\n         * Used in combination with {@link getState} to retain state even if this WebView is hidden.\n         *\n         * @param value the current value of the state\n         */\n        setState(value: unknown): void;\n\n        /**\n         * Send an event to the extension that created this WebView.\n         *\n         * @param event the {@link WebviewMessage} that will be sent\n         */\n        postMessage(event: WebviewMessage): void;\n    }\n\n    /**\n     * Get the {@link VSCodeWebviewAPI} provided to this WebView by VS Code.\n     */\n    function acquireVsCodeApi(): VSCodeWebviewAPI;\n}\n"],
  "mappings": "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",
  "names": ["createCommunicationBridge", "resolve", "reject", "messageHandlers", "message", "handler", "windowBridge", "value", "error", "ErrorMessage", "createContainer", "createIcon", "createMessage", "message", "containerElement", "iconElement", "messageElement", "createCommunicationBridge", "bridge", "vscode", "activeDocumentationPath", "contentToApplyOnRender", "errorMessage", "ErrorMessage", "message", "event", "handleUpdateContentMessage", "content", "hideErrorMessage", "renderNode", "documentationPath", "showErrorMessage", "app"]
}
